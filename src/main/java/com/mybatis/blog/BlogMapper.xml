<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.mybatis.blog.IBlogMapper">

<!--

    字面上看就是这样。这个简单语句的效果如下:

    映射语句文件中的所有 select 语句将会被缓存。
    映射语句文件中的所有 insert,update 和 delete 语句会刷新缓存。
    缓存会使用 Least Recently Used(LRU,最近最少使用的)算法来收回。
    根据时间表(比如 no Flush Interval,没有刷新间隔), 缓存不会以任何时间顺序 来刷新。
    缓存会存储列表集合或对象(无论查询方法返回什么)的 1024 个引用。
    缓存会被视为是 read/write(可读/可写)的缓存,意味着对象检索不是共享的,而 且可以安全地被调用者修改,而不干扰其他调用者或线程所做的潜在修改。


    这个更高级的配置创建了一个 FIFO 缓存,并每隔 60 秒刷新,存数结果对象或列表的 512 个引用,而且返回的对象被认为是只读的,因此在不同线程中的调用者之间修改它们会 导致冲突。

    可用的收回策略有:

    LRU – 最近最少使用的:移除最长时间不被使用的对象。
    FIFO – 先进先出:按对象进入缓存的顺序来移除它们。
    SOFT – 软引用:移除基于垃圾回收器状态和软引用规则的对象。
    WEAK – 弱引用:更积极地移除基于垃圾收集器状态和弱引用规则的对象。

    默认的是 LRU。

    flushInterval(刷新间隔)可以被设置为任意的正整数,而且它们代表一个合理的毫秒 形式的时间段。默认情况是不设置,也就是没有刷新间隔,缓存仅仅调用语句时刷新。

    size(引用数目)可以被设置为任意正整数,要记住你缓存的对象数目和你运行环境的 可用内存资源数目。默认值是 1024。

    readOnly(只读)属性可以被设置为 true 或 false。只读的缓存会给所有调用者返回缓 存对象的相同实例。因此这些对象不能被修改。这提供了很重要的性能优势。
    可读写的缓存 会返回缓存对象的拷贝(通过序列化) 。这会慢一些,但是安全,因此默认是 false。

-->


    <cache
            eviction="FIFO"
            flushInterval="60000"
            size="512"
            readOnly="true"/>

    <cache type="com.mybatis.utils.MyCustomCache"/>
<!--
    回想一下上一节内容, 这个特殊命名空间的唯一缓存会被使用或者刷新相同命名空间内 的语句。
    也许将来的某个时候,你会想在命名空间中共享相同的缓存配置和实例。在这样的 情况下你可以使用 cache-ref 元素来引用另外一个缓存。
-->

    <cache-ref namespace="com.mybatis.autho.AuthorMapper"/>

    <resultMap id="draftPostgBean" type="postBean">
        <result property="id" column="id" />
        <result property="subject" column="subject" />
        <association property="author" column = "authorref" javaType="authorBean">
            <id property="id" column="author_id"/>
            <result property="username" column="author_username"/>
            <result property="password" column="author_password"/>
            <result property="email" column="author_email"/>
            <result property="bio" column="author_bio"/>
            <result property="favouriteSection" column="author_favourite_section"/>
        </association>
        <collection property="comments" ofType="commentBean">
            <id property="id" column="comment_id"/>
        </collection>
        <collection property="tags" ofType="tagBean" >
            <id property="id" column="tag_id"/>
        </collection>
    </resultMap>
    <!--
        select 	用于加载复杂类型属性的映射语句的ID,从column中检索出来的数据，将作为此select语句的参数。具体请参考Association标签。
        resultMap 	ResultMap的ID，可以将嵌套的结果集映射到一个合适的对象树中，功能和select属性相似，它可以实现将多表连接操作的结果映射成一个单一的ResultSet。这样的ResultSet将会将包含重复或部分数据重复的结果集正确的映射到嵌套的对象树中。为了实现它, MyBatis允许你 “串联” ResultMap,以便解决嵌套结果集的问题。想了解更多内容，请参考下面的Association元素。
        name 	构造方法形参的名字。通过指定具体的名字你可以以任意顺序写入arg元素。参看上面的解释。从3.4.3版本起。
        -->
    <!-- Very Complex Result Map -->
    <resultMap id="detailedBlogResultMap" type="blogBean">
        <constructor>
            <idArg column="id" javaType="int" name="id"/>
            <arg column="username" javaType="String" name="username"/>
<!--
            <!ELEMENT constructor (idArg*,arg*)>

            <!ELEMENT arg EMPTY>
            <!ATTLIST arg
            javaType CDATA #IMPLIED
            column CDATA #IMPLIED
            jdbcType CDATA #IMPLIED
            typeHandler CDATA #IMPLIED
            select CDATA #IMPLIED
            resultMap CDATA #IMPLIED
            name CDATA #IMPLIED
            >
-->
        </constructor>
        <result property="title" column="blog_title"/>
        <association property="author" column = "authorref" javaType="authorBean">
            <id property="id" column="author_id"/>
            <result property="username" column="author_username"/>
            <result property="password" column="author_password"/>
            <result property="email" column="author_email"/>
            <result property="bio" column="author_bio"/>
            <result property="favouriteSection" column="author_favourite_section"/>
        </association>
        <collection property="posts" ofType="postBean">
            <id property="id" column="post_id"/>
            <result property="subject" column="post_subject"/>
            <association property="author" javaType="authorBean"/>
            <collection property="comments" ofType="commentBean">
                <id property="id" column="comment_id"/>
            </collection>
            <collection property="tags" ofType="tagBean" >
                <id property="id" column="tag_id"/>
            </collection>
            <discriminator javaType="int" column="draft">
                <case value="1" resultType="draftPostgBean"/>
            </discriminator>
        </collection>
    </resultMap>
  <!--  column="id" a param for selectPostsForBlog -->

    <resultMap id="blogResultAllPost" type="postBean" extends="detailedBlogResultMap">
        <collection property="posts" javaType="ArrayList" column="id" ofType="postBean" select="selectPostsForBlog"/>
    </resultMap>
<!--
    尽管曾经有些人会发现这个外部映射定义会多少有一些令人厌烦之处。 因此还有另外一 种语法来做简洁的映射风格。比如:

    这些都是结果映射, 如果你不指定任何结果, 那么 MyBatis 将会为你自动匹配列 和属性。
    所以这些例子中的大部分是很冗长的,而其实是不需要的。也就是说,很多数据库 是很复杂的,、
    我们不太可能对所有示例都能依靠它。
-->
    <resultMap id="vehicleResult" type="Vehicle">
        <id property="id" column="id" />
        <result property="vin" column="vin"/>
        <result property="year" column="year"/>
        <result property="make" column="make"/>
        <result property="model" column="model"/>
        <result property="color" column="color"/>
        <discriminator javaType="int" column="vehicle_type">
            <case value="1" resultType="carResult">
                <result property="doorCount" column="door_count" />
            </case>
            <case value="2" resultType="truckResult">
                <result property="boxSize" column="box_size" />
                <result property="extendedCab" column="extended_cab" />
            </case>
            <case value="3" resultType="vanResult">
                <result property="powerSlidingDoor" column="power_sliding_door" />
            </case>
            <case value="4" resultType="suvResult">
                <result property="allWheelDrive" column="all_wheel_drive" />
            </case>
        </discriminator>
    </resultMap>



    <!--我们又一次联合了博客表和文章表,而且关注于保证特性,结果列标签的简单映射。现 在用文章映射集合映射博客,可以简单写为:

    <resultMap id="blogResult" type="Blog">
        <id property="id" column="blog_id" />
        <result property="title" column="blog_title"/>
        <collection property="posts" ofType="Post">
            <id property="id" column="post_id"/>
            <result property="subject" column="post_subject"/>
            <result property="body" column="post_body"/>
        </collection>
    </resultMap>
-->

<!--

    同样,要记得 id 元素的重要性,如果你不记得了,请阅读上面的关联部分。

    同样, 如果你引用更长的形式允许你的结果映射的更多重用, 你可以使用下面这个替代 的映射:

    要注意 columnPrefix="post" 的使用

    <resultMap id="blogResult" type="Blog">
        <id property="id" column="blog_id" />
        <result property="title" column="blog_title"/>
        <collection property="posts" ofType="Post" resultMap="blogPostResult" columnPrefix="post_"/>
    </resultMap>

    <resultMap id="blogPostResult" type="Post">
        <id property="id" column="id"/>
        <result property="subject" column="subject"/>
        <result property="body" column="body"/>
    </resultMap>
-->

    <resultMap id="blogResult" type="blogBean">
        <association property="author" column="authorref" javaType="authorBean" select="selectAuthorById"/>
    </resultMap>

    <select id="selectBlogById" resultMap="blogResult">
        SELECT * FROM BLOG WHERE ID = #{id}
    </select>

    <select id="selectAuthorById" resultType="authorBean">
        SELECT * FROM AUTHOR WHERE ID = #{id}
    </select>
<!--
    上面的解说:
    我们有两个查询语句:一个来加载博客,另外一个来加载作者,而且博客的结果映射描 述了“selectAuthor”语句应该被用来加载它的 author 属性。

    其他所有的属性将会被自动加载,假设它们的列和属性名相匹配。

    这种方式很简单, 但是对于大型数据集合和列表将不会表现很好。 问题就是我们熟知的 “N+1 查询问题”。概括地讲,N+1 查询问题可以是这样引起的:

    你执行了一个单独的 SQL 语句来获取结果列表(就是“+1”)。
    对返回的每条记录,你执行了一个查询语句来为每个加载细节(就是“N”)。

    这个问题会导致成百上千的 SQL 语句被执行。这通常不是期望的。

    MyBatis 能延迟加载这样的查询就是一个好处,因此你可以分散这些语句同时运行的消 耗。然而,如果你加载一个列表,之后迅速迭代来访问嵌套的数据,你会调用所有的延迟加 载,这样的行为可能是很糟糕的。
    -->

    <select id="selectPostsForBlog" resultType="Post">
        SELECT * FROM POST WHERE BLOG_ID = #{id}
    </select>

    <!-- Very Complex Statement -->
    <select id="selectBlogDetails" resultMap="detailedBlogResultMap">
        select
        B.id as blog_id,
        B.title as blog_title,
        B.author_id as blog_author_id,
        A.id as author_id,
        A.username as author_username,
        A.password as author_password,
        A.email as author_email,
        A.bio as author_bio,
        A.favourite_section as author_favourite_section,
        P.id as post_id,
        P.blog_id as post_blog_id,
        P.author_id as post_author_id,
        P.created_on as post_created_on,
        P.section as post_section,
        P.subject as post_subject,
        P.draft as draft,
        P.body as post_body,
        C.id as comment_id,
        C.post_id as comment_post_id,
        C.name as comment_name,
        C.comment as comment_text,
        T.id as tag_id,
        T.name as tag_name
        from Blog B
        left outer join Author A on B.author_id = A.id
        left outer join Post P on B.id = P.blog_id
        left outer join Comment C on P.id = C.post_id
        left outer join Post_Tag PT on PT.post_id = P.id
        left outer join Tag T on PT.tag_id = T.id
        where B.id = #{id}
    </select>

    <select id="selectBlog" resultType="blogBean">
        select * from Blog where id = #{id}
    </select>

    <select id="findActiveBlogWithTitleLike"
            resultType="blogBean">
        SELECT * FROM BLOG
        WHERE state = ‘ACTIVE’
        <if test="title != null">
            AND title like #{title}
        </if>
    </select>


    <select id="findActiveBlogLike"
            resultType="Blog">
        SELECT * FROM BLOG WHERE state = ‘ACTIVE’
        <choose>
            <when test="title != null">
                AND title like #{title}
            </when>
            <when test="author != null and author.username != null">
                AND username like #{author.username}
            </when>
            <otherwise>
                AND featured = 1
            </otherwise>
        </choose>
    </select>

    <select id="findActiveBlogLikeByWhere"
            resultType="Blog">
        SELECT * FROM BLOG
        <where>
            <if test="state != null">
                state = #{state}
            </if>
            <if test="title != null">
                AND title like #{title}
            </if>
            <if test="author != null and author.name != null">
                AND author_name like #{author.name}
            </if>
        </where>
    </select>

    <select id="findActiveBlogLikeByTrim"
            resultType="Blog">
        SELECT * FROM BLOG
        <trim prefix="WHERE" prefixOverrides="AND |OR ">
            <if test="state != null">
                state = #{state}
            </if>
            <if test="title != null">
                AND title like #{title}
            </if>
            <if test="author != null and author.name != null">
                AND author_name like #{author.name}
            </if>
        </trim>
    </select>

<!--
    bind 元素可以从 OGNL 表达式中创建一个变量并将其绑定到上下文。比如：
-->

    <select id="selectBlogsLike" resultType="Blog">
        <bind name="pattern" value="'%' + _parameter.getTitle() + '%'" />
        SELECT * FROM BLOG
        WHERE title LIKE #{pattern}
    </select>


    <!--exp-->
    <select
            id="selectPerson"
            parameterType="int"
            parameterMap="deprecated"
            resultType="hashmap"
            resultMap="personResultMap"
            flushCache="false"
            useCache="true"
            timeout="10000"
            fetchSize="256"
            statementType="PREPARED"
            resultSetType="FORWARD_ONLY">
    </select>

    <insert
            id="insertBlog"
            parameterType="com.mybatis.blog.Blog"
            flushCache="true"
            statementType="PREPARED"
            keyProperty=""
            keyColumn=""
            useGeneratedKeys="true"
            timeout="20"/>

    <update
            id="updateBlog"
            parameterType="com.mybatis.blog.Blog"
            flushCache="true"
            statementType="PREPARED"
            timeout="20"/>

    <delete
            id="deleteBlog"
            parameterType="com.mybatis.blog.Blog"
            flushCache="true"
            statementType="PREPARED"
            timeout="20"/>

</mapper>



